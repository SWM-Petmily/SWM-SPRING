package com.ddungja.petmily.mock.repository;

import com.ddungja.petmily.like.domain.Like;
import com.ddungja.petmily.like.service.port.LikeRepository;
import com.ddungja.petmily.post.domain.type.PostStatusType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class FakeLikeRepository implements LikeRepository {

    private long autoGeneratedId = 1L;
    private final List<Like> data = new ArrayList<>();
    @Override
    public Optional<Like> findByPostIdAndUserId(Long postId, Long userId) {
        return data.stream().filter(item -> item.getPost().getId().equals(postId) && item.getUser().getId().equals(userId)).findFirst();
    }

    @Override
    public Like save(Like like) {
        if (like.getId() == null || like.getId() == 0) {
            Like newLike = Like.builder()
                    .id(autoGeneratedId++)
                    .post(like.getPost())
                    .user(like.getUser())
                    .build();
            data.add(newLike);
            return newLike;
        }
        data.removeIf(item -> item.getId().equals(like.getId()));
        data.add(like);
        return like;
    }

    @Override
    public Page<Like> findByUserIdAndPostStatus(Long userId, PostStatusType postStatusType, Pageable pageable) {
        List<Like> content = data.stream().filter(item -> item.getUser().getId().equals(userId)).toList();
        return new PageImpl<>(content, pageable,data.size());

    }

    @Override
    public void delete(Like like) {
        data.removeIf(item -> item.getId().equals(like.getId()));
    }

    @Override
    public int countByPostId(Long postId) {
        return data.stream().filter(item -> item.getPost().getId().equals(postId)).mapToInt(item -> 1).sum();
    }

    @Override
    public int countByUserId(Long userId) {
        return data.stream().filter(item -> item.getUser().getId().equals(userId)).mapToInt(item -> 1).sum();
    }

    @Override
    public void deleteByUserId(Long userId) {
        data.removeIf(item -> item.getUser().getId().equals(userId));
    }
}
