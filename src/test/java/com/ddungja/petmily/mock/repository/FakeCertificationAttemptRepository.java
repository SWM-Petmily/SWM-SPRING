package com.ddungja.petmily.mock.repository;

import com.ddungja.petmily.user.domain.certification.CertificationAttempt;
import com.ddungja.petmily.user.service.port.CertificationAttemptRepository;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class FakeCertificationAttemptRepository implements CertificationAttemptRepository {

    private long autoGeneratedId = 1L;
    private final List<CertificationAttempt> data = new ArrayList<>();

    @Override
    public CertificationAttempt save(CertificationAttempt certificationAttempt) {
        if (certificationAttempt.getId() == null || certificationAttempt.getId() == 0) {
            CertificationAttempt newCertification = CertificationAttempt.builder()
                    .id(autoGeneratedId++)
                    .lastAttemptDate(certificationAttempt.getLastAttemptDate())
                    .attemptCount(certificationAttempt.getAttemptCount())
                    .user(certificationAttempt.getUser())
                    .build();
            data.add(newCertification);
            return newCertification;
        }
        data.removeIf(item -> item.getId().equals(certificationAttempt.getId()));
        data.add(certificationAttempt);
        return certificationAttempt;
    }

    @Override
    public Optional<CertificationAttempt> findByUserIdAndLastAttemptDate(Long userId, LocalDate attemptDate) {
        return data.stream().filter(item -> item.getUser().getId().equals(userId) && item.getLastAttemptDate().equals(attemptDate)).findFirst();
    }
}
