package com.ddungja.petmily.mock.repository;

import com.ddungja.petmily.apply.domain.Apply;
import com.ddungja.petmily.apply.domain.ApprovalType;
import com.ddungja.petmily.apply.service.port.ApplyRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class FakeApplyRepository implements ApplyRepository {

    private long autoGeneratedId = 1L;
    private final List<Apply> data = new ArrayList<>();

    @Override
    public Page<Apply> findBySellerIdAndPostId(Long sellerId, Long postId, Pageable pageable) {
        return null;
    }

    @Override
    public Page<Apply> getApplyList(Long userId, ApprovalType approval, Pageable pageable) {
        List<Apply> content = data.stream().filter(item -> item.getUser().getId().equals(userId) && item.getApproval().equals(approval)).toList();
        return new PageImpl<>(content, pageable, data.size());
    }

    @Override
    public int countByUserId(Long userId) {
        return data.stream().filter(item -> item.getUser().getId().equals(userId)).mapToInt(item -> 1).sum();
    }

    @Override
    public Optional<Apply> findDetailById(Long applyId) {
        return data.stream().filter(item -> item.getId().equals(applyId)).findAny();
    }

    @Override
    public Optional<Apply> findByIdAndSellerId(Long applyId, Long sellerId) {
        return data.stream().filter(item -> item.getId().equals(applyId) && item.getSeller().getId().equals(sellerId)).findAny();
    }

    @Override
    public Optional<Apply> findByUserIdAndPostId(Long userId, Long postId) {
        return data.stream().filter(item -> item.getUser().getId().equals(userId) && item.getPost().getId().equals(postId)).findAny();
    }

    @Override
    public Optional<Apply> findByIdAndUserId(Long applyId, Long userId) {
        return data.stream().filter(item -> item.getId().equals(applyId) && item.getUser().getId().equals(userId)).findAny();
    }

    @Override
    public Apply save(Apply apply) {
        if (apply.getId() == null || apply.getId() == 0) {
            Apply newApply = Apply.builder()
                    .id(autoGeneratedId++)
                    .user(apply.getUser())
                    .seller(apply.getSeller())
                    .post(apply.getPost())
                    .approval(apply.getApproval())
                    .applyExperiences(apply.getApplyExperiences())
                    .job(apply.getJob())
                    .environment(apply.getEnvironment())
                    .people(apply.getPeople())
                    .comment(apply.getComment())
                    .openTalk(apply.getOpenTalk())
                    .region(apply.getRegion())
                    .isExperience(apply.isExperience())
                    .url(apply.getUrl())
                    .build();
            data.add(newApply);
            return newApply;
        }
        data.removeIf(item -> item.getId().equals(apply.getId()));
        data.add(apply);
        return apply;
    }
}
