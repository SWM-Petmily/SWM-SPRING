package com.ddungja.petmily.mock.repository;

import com.ddungja.petmily.post.domain.Post;
import com.ddungja.petmily.post.domain.request.PostFilterRequest;
import com.ddungja.petmily.post.domain.type.PostStatusType;
import com.ddungja.petmily.post.service.port.PostRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class FakePostRepository implements PostRepository {
    private long autoGeneratedId = 1L;
    private final List<Post> data = new ArrayList<>();
    @Override
    public Post save(Post post) {
        if (post.getId() == null || post.getId() == 0) {
            Post newPost = Post.builder()
                    .id(autoGeneratedId++)
                    .user(post.getUser())
                    .mainCategory(post.getMainCategory())
                    .subCategory(post.getSubCategory())
                    .thumbnailImage(post.getThumbnailImage())
                    .like(post.getLike())
                    .images(post.getImages())
                    .applys(post.getApplys())
                    .diseases(post.getDiseases())
                    .gender(post.getGender())
                    .birth(post.getBirth())
                    .age(post.getAge())
                    .name(post.getName())
                    .region(post.getRegion())
                    .neutered(post.getNeutered())
                    .money(post.getMoney())
                    .reason(post.getReason())
                    .advantage(post.getAdvantage())
                    .disadvantage(post.getDisadvantage())
                    .averageCost(post.getAverageCost())
                    .adopter(post.getAdopter())
                    .status(post.getStatus())
                    .isRegistered(post.getIsRegistered())
                    .isVaccinated(post.getIsVaccinated())
                    .isMedicalChecked(post.getIsMedicalChecked())
                    .views(post.getViews())
                    .reports(post.getReports())
                    .build();
            data.add(newPost);
            return newPost;
        }
        data.removeIf(item -> item.getId().equals(post.getId()));
        data.add(post);
        return post;
    }

    @Override
    public Optional<Post> findPostById(Long postId) {
        return data.stream().filter(item -> item.getId().equals(postId)).findAny();
    }

    @Override
    public Page<Post> getMyPost(Long userId, PostStatusType postStatusType, Pageable pageable) {
        List<Post> content = data.stream().filter(item -> item.getUser().getId().equals(userId)).toList();
        return new PageImpl<>(content, pageable,data.size());

    }

    @Override
    public Optional<Post> findById(Long postId) {
        return data.stream().filter(item -> item.getId().equals(postId)).findAny();
    }

    @Override
    public Page<Post> getMainPosts(Long userId, PostFilterRequest postFilterRequest, Pageable pageable) {
        List<Post> content = data.stream().filter(item -> item.getUser().getId().equals(userId)).toList();
        return new PageImpl<>(content, pageable,data.size());
    }

    @Override
    public Page<Post> getMainPosts(PostFilterRequest postFilterRequest, Pageable pageable) {
        List<Post> content = data.stream().filter(item -> item.getMainCategory().equals(postFilterRequest.getMainCategory())).toList();
        return new PageImpl<>(content, pageable,data.size());
    }
}
